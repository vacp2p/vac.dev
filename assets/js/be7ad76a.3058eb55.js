"use strict";(self.webpackChunkvac_dev=self.webpackChunkvac_dev||[]).push([[512],{2067:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var i=n(70094),o=n(74848),r=n(28453);const a={title:"Zerokit optimizations: A performance journey",date:new Date("2025-07-05T18:30:00.000Z"),authors:"benph",published:!1,slug:"2025-zerokit-perf",categories:"research",toc_min_heading_level:2,toc_max_heading_level:5},s=void 0,h={authorsImageUrls:[void 0]},l=[{value:"Background",id:"background",level:2},{value:"The Challenge",id:"the-challenge",level:2},{value:"The importance of benchmarks",id:"the-importance-of-benchmarks",level:2},{value:"Benchmarking with Rusts <code>criterion</code> Crate",id:"benchmarking-with-rusts-criterion-crate",level:2},{value:"Promising results",id:"promising-results",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h2:"h2",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://github.com/vacp2p/zerokit/",children:(0,o.jsx)("u",{children:"Zerokit"})}),' is a toolkit\nproviding powerful zero-knowledge utilities, including a\nmeans to answer the question "How do you prevent spam when\nevery message is anonymous?". Its use of the Merkle hash\ntree, combined Poseidon hasher are keys to the answer we\nseek here, and with other questions that ask the improbable.\nThese technologies, however, can take a heavy toll on\nresources if not used correctly. What follows is a window\ninto the efforts made to squeeze out optimizations, and\nculling of redundant resource use. A story of cripplingly\nslow performance meets engineering talent, we arrive at a\nplace where Zerokit comes through, fast and efficient, ready\nto face the world.']}),"\n",(0,o.jsx)(t.h2,{id:"background",children:"Background"}),"\n",(0,o.jsxs)(t.p,{children:["Our friends over at ",(0,o.jsx)(t.a,{href:"https://free.technology/waku",children:(0,o.jsx)("u",{children:"Waku"})})," are\nparticularly enthusiastic about anonymous spam prevention\ntechnologies. They have been using the Rate Limiting\nNullifier (",(0,o.jsx)(t.a,{href:"https://crates.io/crates/rln",children:(0,o.jsx)("u",{children:"RLN"})}),') tooling that\nZerokit provides to enforce a message-rate policy among\nusers\u2014a crucial feature unless we want a community bombarded\nwith "totally legit, not scams" messages on repeat. However,\nas is often the case with new technology, some problematic\ndelays began to surface. Node recalculations, a common\noperation, were taking tens of seconds at the scales being\ntested and deployed\u2014even exceeding 40 seconds at times.\nThese delays accumulate, leading to total delays on the\norder of three hours under certain conditions.']}),"\n",(0,o.jsx)(t.p,{children:"Naturally, we couldn't just let this sit. While we've\ntouched on the issue of spam prevention, it's important to\nrecognize that this technology is foundational that\nchallenges conventional wisdom on how things must be done.\nDoes the idea of \"smart contracts without gas\" catch your\nattention? Don't hold your breath just yet: the really\ninteresting applications of this tech will be dead in the\nwater, unless we can meet the challenge put to us."}),"\n",(0,o.jsx)(t.h2,{id:"the-challenge",children:"The Challenge"}),"\n",(0,o.jsxs)(t.p,{children:["The plan of attack that the team put together was twofold:\nget rid of redundant operations and data taking up precious\nresources, and make the remaining operations go\n",(0,o.jsx)(t.a,{href:"https://old.reddit.com/r/rust/comments/1avf1d8/blazingly_fast_memory_vulnerabilities_written_in/",children:(0,o.jsxs)("u",{children:[(0,o.jsx)(t.em,{children:"Blazingly Fast\u2122"}),"."]})})]}),"\n",(0,o.jsxs)(t.p,{children:["Introducing the the star of the show for part 1: The main\npoint of having this tree is to generate proofs so that\npeers can verify the claims being made. That doesn\u2019t require\nthe whole Merkle tree, just a single path, from leaf to\nroot. The engineering work took us in a direction where\nthese paths were the primary context in which ZK proofs\noperated, relegating the tree itself to an off-network\nreference. This reduced the burden imposed on the network\nsignificantly. Updating the data on the tree has similarly\nreduced, with the exception being that the siblings of each\nnode were retained. This is called the ",(0,o.jsx)(t.strong,{children:"Stateless"}),"\napproach."]}),"\n",(0,o.jsxs)(t.p,{children:["Well, stateless in the context of proof generation and\nverification. This is the critical context when it comes to\nperformance, and the stateless approach does a great job,\nbut these proofs have to come from ",(0,o.jsx)(t.em,{children:"somewhere"}),". Each\nparticipant still needs to maintain the Merkle tree in their\nlocal environment. Without this tree, one cannot generate\nproofs or verify the proofs provided to them. Fortunately,\none does not need to track the entire tree, but can be\nlimited to a subset of the tree needed. With millions of\nparticipants on-chain, this can make the difference needed\nto make Zerokit empowered technologies accessible to those\nrunning raspberry Pis. Combine this with the fact that the\nheavy lifting operations of proof gen/verification being\nmodular and separate, each participant can optimise to run\nthings according to the strengths and requirements of their\nnative hardware, easing the way to allow each participants\nto run their tree implementation at the speed of\nmach-ludicrous."]}),"\n",(0,o.jsx)(t.p,{children:"Fortunately, the core of our already existing implementation\nwas sane and well put together. Double-lucky for us, the\ntalents of newly minted VAC/ACZ team members Sylvain and Vinh were\nreadily available. Sylvain, with a solid background in the Rust\nprogramming language, having already graduated from the most\nchallenging parts of its infamous learning curve. He quickly\ngot to work zeroing in on some subtle performance pathologies.\nSomething as simple as using a mutable iterator to change\nvalues directly. Clever use of references to avoid copying\ndata, and other memory optimization techniques that can be\nhidden to those that cannot \u201csee the matrix\u201d when working in\nRust lead to very promising bench-marking results."}),"\n",(0,o.jsxs)(t.p,{children:["Vinh, having recently graduated from his CS studies, was presented\nwith the challenge of parrelising computations. For those not\nfamiliar with Rust, this might seem unreasonable, but thanks\nto the ",(0,o.jsx)(t.code,{children:"rayon"}),' crate, and Rusts promise of "fearless concurrency"\nafforded by its type and ownership system, this kind of refactor\nbecomes surprisingly easy, even for a talented individual at\nthe start of their career. Of particular note: These parallelisations\nhave been made available to the browser. Browser threads are\nrelatively now, and by diving into this bleeding-edge technology,\nand making use of libraries that are still in early development\nstages, ',(0,o.jsx)(t.em,{children:"Blazingly Fast\u2122"})," is now available within the browser.\nWith all that in the bag, all these performance gains are\ngift-wrapped in the use of browser-native WASM runtimes."]}),"\n",(0,o.jsx)(t.p,{children:"Well done, everyone!"}),"\n",(0,o.jsx)(t.h2,{id:"the-importance-of-benchmarks",children:"The importance of benchmarks"}),"\n",(0,o.jsxs)(t.p,{children:["No performance project is complete without high quality\nbenchmark data. Writing a quick benchmark for tracking\nimprovements through development is one thing, but having a\nsystem of telemetry that allows you to credibly assert\nclaims of superior performance is what completes the\nproject. With such credible claims in hand, these efforts\ncan bring about significant impact on the field at large.\nThe key word being ",(0,o.jsx)(t.strong,{children:"credible"}),". Credibility cannot depend\non \u201ctrust me bro\u201d (obviously). The truth of these claims\nmust come out of the directed efforts of a multitude of\nthought-disciplines. The engineer must have a solid model to\nunderstand the nature of the system. The statistician sets\nthe quality standards of the data. The Scientist must\ndiligently put relevant hypothesis to the test. The advocate\nmust see that the reports made reach out to where it makes\nthe most impact, the list goes on. Much of this is out of\nscope for this article, and so I will treat you with\n",(0,o.jsx)(t.a,{href:"https://www.youtube.com/watch?v=qUN4Tln608Q&list=PLtoQeavghzr3nlXyJEXaTLU9Ca0DXWMnt",children:(0,o.jsx)("u",{children:"a link"})}),".\nHere\u2019s your chance to see a hardcore OS engineer at the top\nof their chosen field speak on the subject of their passion."]}),"\n",(0,o.jsx)(t.p,{children:"All this is to say we are not the only team implementing\nMerkle tree tech, which also includes the Poseidon hash\nfunction it needs. In order to be a premier research\ndestination, key aspect of why VAC exists, the fruits of our\nlabor is just the beginning. We must prove the merit of our\nefforts through comparative benchmarks that satisfies the\nskeptics and decision makers."}),"\n",(0,o.jsx)(t.p,{children:"Comparative benchmarks are among the most high-stakes\nelement of performance critical projects. Get it right, and\nquality research output can become industry standard\ntechnology. Get it wrong, and be ready to lose the trust the\nfield has in you as your precious R&D fades into obscurity."}),"\n",(0,o.jsxs)(t.p,{children:["For the time being, our comparative benchmarks have been\nused internally to inform decision-makers. As benchmarks\nbecome standardised, independently verified and executed,\nthis initial effort may be the first of many steps to a\ncommunity-wide ecosystem. A thunderdome of benchmarks,\nleaving us with a single champion that cannot be denied, but\nwhich technology will claim this mantle? May the bits be\n",(0,o.jsx)(t.em,{children:"ever"})," in your favor..."]}),"\n",(0,o.jsxs)(t.h2,{id:"benchmarking-with-rusts-criterion-crate",children:["Benchmarking with Rusts ",(0,o.jsx)(t.code,{children:"criterion"})," Crate"]}),"\n",(0,o.jsx)(t.p,{children:'Rust, much like Nim, offers unadulterated, fine-grained, and\ndirect control over performance, but with Rust, this control\nis even more immediate. With its sophisticated ownership\nmodel, powerful type system, and comprehensive tooling, Rust\nhas earned an unrivaled reputation for enabling "fearless\nconcurrency," ease of refactoring, and providing tooling\nthat effectively "pair programs with you" to help avoid\ncommon pitfalls, includeing those of the performance\nveriety.'}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.a,{href:"https://crates.io/crates/criterion",children:(0,o.jsx)("u",{children:"Criterion"})})," crate is\nconsidered the go-to library for micro-benchmarking within\nthe Rust ecosystem, and is generally regarded as an\ninvaluable tool for obtaining high-quality telemetry.\nThrough its ergonomic idioms and well-thought-out API,\nwriting high-quality benchmarks becomes straightforward once\nyou become familiar with its features. Criterion helps avoid\ncommon traps such as inappropriate compiler optimizations,\nimproper performance sampling, and failing to prune\ntelemetry overhead. As is typical for the Rust ecosystem,\nthe documentation is thorough, leaving little to be desired,\nand the examples are extensive, making the initial learning\nprocess a pleasant experience."]}),"\n",(0,o.jsx)(t.p,{children:"Most importantly, it automatically generates tables and\ngraphs from this data, making the crucial task of analysis\nstraightforward and accessible. At this point, we are ready\nto appreciate the results of our efforts."}),"\n",(0,o.jsx)(t.h2,{id:"promising-results",children:"Promising results"}),"\n",(0,o.jsx)(t.p,{children:"When it comes to Merkle trees, we have two elements to\nconsider: The tree itself, and the hashing function that is\nplugged into it. In the benchmarks we put together for the\nbenefit of internal processes, we put our implementation up\nagainst a corresponding FOSS implementation. Scenarios were\ndeveloped to isolate key performance telemetry, obtain a\nstatistically usable sampling, with the resulting data\nrendered into a human readable form that can be read with a\nreasonable degree of confidence: enjoy! The brief summary:\nIt appears that our in house implementation consistently\noutperforms others, and we\u2019ve decided to continue committing\nto the R&D of our in-house implementations. Congratulations\nto the Zerokit team for this accomplishment."}),"\n",(0,o.jsx)(t.p,{children:"Despite the promising results, these \u201cmicro-benchmarks\u201d form\njust some of the many pieces of the whole system performance\nwhen it comes to product needs. How the system performs as a\nwhole is all that matters. This is a promising on it\u2019s own,\nbut watching the performance benefits being realized in the\nwild is the true goal."}),"\n",(0,o.jsx)(t.p,{children:"Which brings us back to what started all this: Waku came to\nus with concerns about performance issues within Zerokit\nlimiting the scope and scale in which it can be used. The\nengineering talent brought to bear on this issue has\nsuccessfully achieved the performance goals needed, and the\nresults of these effort have demonstrated there is merit in\ncontinuing our commitment to this project."}),"\n",(0,o.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsxs)(t.p,{children:["We\u2019ve covered a story that starts with crippling performance\nbottlenecks in Waku, and ends on this high-note: The\nproblematic performance scaling issues are no more, and in\nthe process of resolving this critical pain-point, we have\nestablished internal benchmarks that allow us to confidently\nstate that what we are doing, we are doing well. These\naccomplishments come down to a solid team effort. The open\ncommunication coming in from Waku, the talented engineers\nworking together to bring their skills and contributions to\nbear, the community developed tools and prior works that\nallowed it all to happen, and those working quietly in the\nbackground providing the leadership, resources, and\ncoordination needed to bring this all together. Two VAC/ACZ\nengineers in particular call for specific mention:\n",(0,o.jsx)(t.a,{href:"https://github.com/seemenkina",children:(0,o.jsx)("u",{children:"Ekaterina"})})," for her role in\ntaking lead in the R&D of the Zerokit ecosystem, and\n",(0,o.jsx)(t.a,{href:"https://github.com/sydhds",children:(0,o.jsx)("u",{children:"Sylvain"})})," for his efforts in\nsqueezing out some impressive optimizations.\n",(0,o.jsx)(t.a,{href:"https://github.com/vinhtc27",children:(0,o.jsx)("u",{children:"Vinh"})})," for unleashing the power of multiple threads, not\nonly for native, but for when running in the browser as well."]}),"\n",(0,o.jsxs)(t.p,{children:["Perhaps you want to get involved! Maybe you have some ideas\nabout what the community needs for standard benchmarks.\nWould you like to see another implementation added to the\nthunderdome?\n",(0,o.jsx)(t.a,{href:"https://github.com/vacp2p/zerokit/issues/new",children:(0,o.jsx)("u",{children:"Raise an issue"})}),",\nor join us on ",(0,o.jsx)(t.a,{href:"https://forum.vac.dev/",children:(0,o.jsx)("u",{children:"our forum"})}),". We look\nforward to seeing your voice added."]}),"\n",(0,o.jsx)(t.p,{children:"This is just one story, coming out of one relatively small\nproject from VAC research. The two driving directives of the\nteam is to be a conduit of expertise within IFT, and to be a\npremier research destination within the domains we work in.\nYou might be independent of IFT with an interest in what we\ndo, an IFT core contributor, or anything in between: our\nservices are at your disposal. Join us on discord to start\nthe conversation, email one of our team members, or maybe\nyou might hear a knock on your door, should something in\nyour field of work catch our interest."})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var i=n(96540);const o={},r=i.createContext(o);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:t},e.children)}},70094:e=>{e.exports=JSON.parse('{"permalink":"/rlog/2025-zerokit-perf","source":"@site/rlog/2025-07-05-zerokit-performance.md","title":"Zerokit optimizations: A performance journey","description":"Zerokit is a toolkit","date":"2025-07-05T18:30:00.000Z","tags":[],"readingTime":9.775,"hasTruncateMarker":false,"authors":[{"name":"BenPH","github":"Ben-PH","key":"benph","page":null}],"frontMatter":{"title":"Zerokit optimizations: A performance journey","date":"2025-07-05T18:30:00.000Z","authors":"benph","published":false,"slug":"2025-zerokit-perf","categories":"research","toc_min_heading_level":2,"toc_max_heading_level":5},"unlisted":false,"nextItem":{"title":"The MDSECheck method: choosing secure square MDS matrices for P-SP-networks","permalink":"/rlog/mdsecheck-method"}}')}}]);