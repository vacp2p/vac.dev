"use strict";(self.webpackChunkvac_dev=self.webpackChunkvac_dev||[]).push([[4588],{61357:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>n,metadata:()=>l,toc:()=>p});var r=a(87462),i=(a(67294),a(3905));const n={title:"Exploring zkVMs: Which Projects Truly Qualify as Zero-Knowledge Virtual Machines?",date:new Date("2024-08-27T12:00:00.000Z"),authors:"moudy",published:!0,slug:"zkVM-explorations",categories:"research",discuss:"https://forum.vac.dev/t/exploring-zkvms-which-projects-truly-qualify-as-zero-knowledge-virtual-machines/317",toc_min_heading_level:2,toc_max_heading_level:5},o=void 0,l={permalink:"/rlog/zkVM-explorations",source:"@site/rlog/2024-08-27-Zkvm.mdx",title:"Exploring zkVMs: Which Projects Truly Qualify as Zero-Knowledge Virtual Machines?",description:"The blockchain space is rapidly evolving, and with it, new technologies are emerging that promise enhanced privacy, scalability, and security.",date:"2024-08-27T12:00:00.000Z",formattedDate:"August 27, 2024",tags:[],readingTime:23.53,hasTruncateMarker:!0,authors:[{name:"Moudy",github:"moudyellaz",key:"moudy"}],frontMatter:{title:"Exploring zkVMs: Which Projects Truly Qualify as Zero-Knowledge Virtual Machines?",date:"2024-08-27T12:00:00.000Z",authors:"moudy",published:!0,slug:"zkVM-explorations",categories:"research",discuss:"https://forum.vac.dev/t/exploring-zkvms-which-projects-truly-qualify-as-zero-knowledge-virtual-machines/317",toc_min_heading_level:2,toc_max_heading_level:5},prevItem:{title:"zkVM Testing Report: Evaluating Zero-Knowledge Virtual Machines for Nescience",permalink:"/rlog/zkVM-testing"},nextItem:{title:"Nescience: A User-Centric State-Separation Architecture",permalink:"/rlog/Nescience-state-separation-architecture"}},s={authorsImageUrls:[void 0]},p=[{value:"1. SP1",id:"1-sp1",level:2},{value:"2. Nexus",id:"2-nexus",level:2},{value:"3. RISC0",id:"3-risc0",level:2},{value:"4. Powdr",id:"4-powdr",level:2},{value:"5. ZkMIPS",id:"5-zkmips",level:2},{value:"6. Valida",id:"6-valida",level:2},{value:"7. Jolt",id:"7-jolt",level:2},{value:"8. ZkWASM",id:"8-zkwasm",level:2},{value:"9. Aleo",id:"9-aleo",level:2},{value:"10. Ola",id:"10-ola",level:2},{value:"11. Miden",id:"11-miden",level:2},{value:"12. ZkOS",id:"12-zkos",level:2},{value:"13. Triton",id:"13-triton",level:2},{value:"14. Cairo",id:"14-cairo",level:2},{value:"15. SnarkOS",id:"15-snarkos",level:2},{value:"16. Lurk",id:"16-lurk",level:2},{value:"17. Piecrust",id:"17-piecrust",level:2},{value:"18. Ceno",id:"18-ceno",level:2},{value:"19. Stellar",id:"19-stellar",level:2},{value:"20. NovaNet",id:"20-novanet",level:2},{value:"21. ZkLLVM",id:"21-zkllvm",level:2},{value:"22. ZkMove",id:"22-zkmove",level:2},{value:"23. O1VM",id:"23-o1vm",level:2}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,'The blockchain space is rapidly evolving, and with it, new technologies are emerging that promise enhanced privacy, scalability, and security.\nAs decentralized systems grow in complexity and usage, the need for secure and private computation has never been greater.\nZero-knowledge virtual machines (zkVMs) are one such innovation, allowing for computations to be proven correct without revealing the underlying data.\nZkVMs have enormous implications for privacy-preserving applications, decentralized finance (DeFi), and other blockchain-based use cases.\nHowever,  as the term "zkVM" becomes more widely adopted, it is critical to distinguish between projects that truly satisfy the stringent requirements of a zkVM and those that do not.'),(0,i.kt)("h1",{id:"what-is-a-zkvm"},"What is a zkVM?"),(0,i.kt)("p",null,"A zkVM is a virtual machine that combines the principles of cryptographic proof generation and privacy preservation with the computational model\nof traditional virtual machines. Essentially, a zkVM enables the execution of arbitrary programs while generating cryptographic proofs\u2014specifically, zero-knowledge proofs (ZKPs)\u2014that\ncan verify the correctness of these computations without revealing any sensitive information. This ensures that computations can be trusted while protecting the privacy of the data involved.\nThe key characteristics of a zkVM include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Proof generation: The ability to produce ZKPs that verify the correct execution of programs. There are several types of cryptographic techniques used in zkVMs to\ngenerate these proofs, such as zk-SNARKs, zk-STARKs, and recursive proofs. A zkVM\u2019s ability to generate these proofs determines how effectively it can ensure the integrity of computations\nin a privacy-preserving manner."),(0,i.kt)("li",{parentName:"ul"},"Privacy preservation: The system must maintain privacy, ensuring that only the proof is revealed, not the underlying computation or data. Privacy-preserving zkVMs allow users to maintain\nconfidentiality without compromising the security or verifiability of their operations. However, not all zkVMs achieve the same level of privacy. Some may focus more on proof generation\nand scalability while deprioritizing privacy features, which can limit their use in certain privacy-sensitive applications."),(0,i.kt)("li",{parentName:"ul"},"Scalability and performance: zkVMs should offer scalable and efficient computation, leveraging advanced cryptographic techniques like zk-SNARKs, zk-STARKs, or recursive proofs.\nA zkVM's performance must also be measured in terms of latency (time to generate and verify a proof) and throughput (number of computations processed within a certain time frame)."),(0,i.kt)("li",{parentName:"ul"},"Verifiable computation: The zkVM should be able to prove the execution of arbitrary programs in a secure and verifiable manner. Verifiable computation ensures that zkVMs can be deployed\nacross a wide range of applications, from DeFi to private data-sharing platforms and more.")),(0,i.kt)("h1",{id:"why-zkvms-matter"},"Why zkVMs matter"),(0,i.kt)("p",null,"The rise of zkVMs is a crucial development for the future of blockchain and decentralized technologies. As more systems require the ability to scale while maintaining privacy and trust,\nzkVMs provide a powerful solution. They offer the potential to reshape the way decentralized applications (dapps) handle sensitive information, enabling them to be both efficient and private."),(0,i.kt)("p",null,"It is essential to distinguish between projects that fully realize the potential of zkVMs and those that do not. In the remainder of this post, we evaluate several zkVM projects, analyzing\nwhether they satisfy the criteria for being classified as zkVMs based on our research."),(0,i.kt)("h1",{id:"our-methodology"},"Our methodology"),(0,i.kt)("p",null,"We analyzed each project\u2019s documentation, source code, and available benchmarks to determine whether they meet the definition of a zkVM.\nOur criteria focus on the key capabilities of zkVMs\u2014proof generation, privacy, scalability, and integration with existing systems."),(0,i.kt)("h1",{id:"zkvm-project-analysis"},"ZkVM project analysis"),(0,i.kt)("h2",{id:"1-sp1"},"1. ","[SP1]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: SP1 [",(0,i.kt)("a",{parentName:"li",href:"https://blog.succinct.xyz/introducing-sp1/"},"1"),"] is a developer-friendly zkVM designed to enable ZKP execution for LLVM-based languages like C, C++, Rust, and others. It supports a RISC-V-like instruction set architecture (ISA),\nwhich makes it compatible with various programming languages compiled through LLVM."),(0,i.kt)("li",{parentName:"ul"},"Main focus: The main focus of SP1 is scalability, open-source contributions, and accessibility for developers. It prioritizes performance over privacy,\nmaking it a good fit for environments where privacy isn't the primary concern."),(0,i.kt)("li",{parentName:"ul"},"Privacy: Not explicitly mentioned, making it less suitable for privacy-preserving applications."),(0,i.kt)("li",{parentName:"ul"},"Performance: SP1 has demonstrated up to 5.4x better performance than similar zkVMs like RISC0 for specific computations such as Fibonacci sequence generation."),(0,i.kt)("li",{parentName:"ul"},"Integration: SP1 is highly adaptable for rollups, light client verifiers, oracles, and even web2 projects like verifying the originality of images."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: Yes, SP1 is a zkVM, but it does not prioritize zero-knowledge privacy, focusing more on scalability and performance.")),(0,i.kt)("h2",{id:"2-nexus"},"2. ","[Nexus]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: Nexus [",(0,i.kt)("a",{parentName:"li",href:"https://docs.nexus.xyz/"},"2"),"] is a highly modular zkVM designed to process up to a trillion CPU cycles per second. It relies on RISC-V instructions for computation, making it extensible and scalable.\nHowever, it currently lacks full ZKP capabilities due to its use of Spartan proofs."),(0,i.kt)("li",{parentName:"ul"},"Main focus: Nexus focuses on high performance and scalability, aiming to create an efficient execution environment for computationally intensive tasks."),(0,i.kt)("li",{parentName:"ul"},"Privacy: Although zero-knowledge privacy isn't the primary feature of Nexus, the project hints at potential privacy enhancements in the future."),(0,i.kt)("li",{parentName:"ul"},"Performance: Nexus has a high theoretical throughput, but it has yet to demonstrate benchmarks on zero-knowledge privacy."),(0,i.kt)("li",{parentName:"ul"},"Integration: Nexus is a good fit for high-performance environments that do not necessarily require full privacy."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: Yes, Nexus qualifies as a zkVM in terms of scalability and proof generation, but it does not yet achieve full zero-knowledge privacy.")),(0,i.kt)("h2",{id:"3-risc0"},"3. ","[RISC0]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: Risc0 [",(0,i.kt)("a",{parentName:"li",href:"https://www.risczero.com/zkvm"},"3"),"] is a general-purpose zkVM with strong developer support. It allows for the execution of Rust and C code on a RISC-V virtual machine\nand generates zk-SNARK and zk-STARK proofs for these computations."),(0,i.kt)("li",{parentName:"ul"},"Main focus: Risc0 is focused on ease of use for developers by abstracting away the complexities of circuit generation, making it accessible for a wide range of use cases."),(0,i.kt)("li",{parentName:"ul"},"Privacy:  Full zero-knowledge privacy is supported via zk-SNARK and zk-STARK proofs, with Groth16 used for constant-size proof generation."),(0,i.kt)("li",{parentName:"ul"},"Performance: Risc0 offers strong benchmarks across different hardware setups, making it one of the most versatile zkVMs in terms of performance and scalability."),(0,i.kt)("li",{parentName:"ul"},"Integration: Risc0 integrates with several ecosystems, including Ethereum, and supports verifiable execution of Rust-based programs."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: Yes, Risc0 qualifies as a zkVM, offering a balance of developer usability, scalability, and privacy.")),(0,i.kt)("h2",{id:"4-powdr"},"4. ","[Powdr]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: Powdr [",(0,i.kt)("a",{parentName:"li",href:"https://docs.powdr.org/"},"4"),"] is a toolkit for creating custom zkVMs. It allows developers to select from various front-end and back-end components to create zkVMs tailored to specific needs."),(0,i.kt)("li",{parentName:"ul"},"Main focus: Powdr is focused on providing a modular architecture for zkVM creation. It enables flexibility by allowing the combination of different ZK-proof backends like Halo2 or Valida."),(0,i.kt)("li",{parentName:"ul"},"Privacy: Powdr itself does not generate ZKPs, but it facilitates the creation of zkVMs that do."),(0,i.kt)("li",{parentName:"ul"},"Performance: The performance depends on the components chosen by the developer, as Powdr itself is more of a framework."),(0,i.kt)("li",{parentName:"ul"},"Integration: Powdr is highly customizable and can integrate with existing zkVM frameworks to extend their capabilities."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: No, Powdr is not a zkVM itself, but it is a powerful tool for building customized zkVMs with different privacy and performance needs.")),(0,i.kt)("h2",{id:"5-zkmips"},"5. ","[ZkMIPS]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: ZkMIPS [",(0,i.kt)("a",{parentName:"li",href:"https://docs.zkm.io/zkm-architecture"},"5"),"] uses zk-STARKs to ensure privacy during computation, ensuring that private inputs are preserved while still proving correctness."),(0,i.kt)("li",{parentName:"ul"},"Performance: ZkMIPS is built for scalability, though explicit benchmarks are not widely published."),(0,i.kt)("li",{parentName:"ul"},"Integration: ZkMIPS can be integrated into systems that rely on MIPS architecture, making it versatile for legacy codebases that require privacy."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: Yes, zkMIPS is a zkVM focused on scalability and privacy for MIPS-based architectures.")),(0,i.kt)("h2",{id:"6-valida"},"6. ","[Valida]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: Valida [",(0,i.kt)("a",{parentName:"li",href:"https://delendum.xyz/writings/2023-05-10-zkvm-design.html"},"6"),"] is a performance-oriented zkVM that generates proofs for programs using a custom ISA designed to optimize zkVM implementation.\nIt uses Plonky3 for its proof system."),(0,i.kt)("li",{parentName:"ul"},"Main focus: Valida is centered around optimizing prover performance and extensibility, making it a valuable tool for generating proofs efficiently."),(0,i.kt)("li",{parentName:"ul"},"Privacy: While Valida is focused on performance, it does not prioritize zero-knowledge privacy as much as other zkVMs."),(0,i.kt)("li",{parentName:"ul"},"Performance: Valida has benchmarks indicating its performance advantages in proving computations quickly, particularly through parallel processing."),(0,i.kt)("li",{parentName:"ul"},"Integration: Valida is specialized and may not integrate as seamlessly into general-purpose systems, as it is optimized for performance over broad applicability."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: Yes, Valida qualifies as a zkVM based on proof generation, but its lack of focus on privacy makes it less suitable for privacy-first use cases.")),(0,i.kt)("h2",{id:"7-jolt"},"7. ","[Jolt]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: Jolt [",(0,i.kt)("a",{parentName:"li",href:"https://a16zcrypto.com/posts/article/building-jolt/"},"7"),"] is a zkVM built to optimize prover performance using a modified Hyrax polynomial commitment system. It relies on RISC-V instructions for computation\nbut falls short of full zero-knowledge capabilities."),(0,i.kt)("li",{parentName:"ul"},"Main focus: Jolt's main goal is to optimize the speed of proving program execution, making it suitable for high-performance applications where privacy isn't the primary concern."),(0,i.kt)("li",{parentName:"ul"},"Privacy: Jolt does not fully achieve zero-knowledge privacy due to the choice of polynomial commitment schemes."),(0,i.kt)("li",{parentName:"ul"},"Performance: Jolt offers strong performance, with benchmarks highlighting its ability to process proofs efficiently."),(0,i.kt)("li",{parentName:"ul"},"Integration: Jolt can be integrated with systems that prioritize speed over privacy, particularly where rapid proof generation is essential."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: Yes, Jolt qualifies as a zkVM based on proof generation, though it does not provide full zero-knowledge privacy.")),(0,i.kt)("h2",{id:"8-zkwasm"},"8. ","[ZkWASM]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: ZkWASM [",(0,i.kt)("a",{parentName:"li",href:"https://delphinuslab.com/zk-wasm/"},"8"),"] is a zkVM designed to execute WebAssembly (WASM) code in a privacy-preserving and scalable manner. It uses zk-SNARKs to prove the correctness of WASM\nprogram execution while ensuring privacy."),(0,i.kt)("li",{parentName:"ul"},"Main focus: ZkWASM focuses on scalability and privacy for WebAssembly, making it ideal for dapps that require verifiable computation without compromising privacy."),(0,i.kt)("li",{parentName:"ul"},"Privacy: Full zero-knowledge privacy is provided through zk-SNARKs, ensuring that the execution of WASM programs remains confidential."),(0,i.kt)("li",{parentName:"ul"},"Performance: ZkWASM is optimized for running WASM programs efficiently, with offchain computation and onchain verification to enhance performance."),(0,i.kt)("li",{parentName:"ul"},"Integration: ZkWASM is ideal for dapps, particularly those that use WebAssembly and require verifiable execution."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: Yes, zkWASM qualifies as a zkVM, providing strong privacy, scalability, and verifiable execution for WebAssembly code.")),(0,i.kt)("h2",{id:"9-aleo"},"9. ","[Aleo]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: Aleo's [",(0,i.kt)("a",{parentName:"li",href:"https://aleo.org/blog/"},"9"),"] snarkVM converts code into Aleo instructions, which are then compiled into bytecode executable on its zkVM. Aleo emphasizes building private, scalable dapps."),(0,i.kt)("li",{parentName:"ul"},"Main focus: Aleo prioritizes privacy and scalability for dapps, providing a robust framework for developers building private dapps."),(0,i.kt)("li",{parentName:"ul"},"Privacy: Aleo offers full privacy through zk-SNARK proofs, making it suitable for building fully private applications."),(0,i.kt)("li",{parentName:"ul"},"Performance: Aleo focuses on scalability through efficient proof systems, though detailed performance benchmarks are not widely available."),(0,i.kt)("li",{parentName:"ul"},"Integration: Aleo is built for privacy-first dapps and integrates with other zkVM-based systems."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: Yes, Aleo qualifies as a zkVM, offering a comprehensive solution for private and scalable dapps.")),(0,i.kt)("h2",{id:"10-ola"},"10. ","[Ola]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: Ola [",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Sin7Y/olavm-whitepaper-v2/tree/master"},"10"),"] is a ZK-friendly, high-performance layer-2 (L2) rollup platform that is still under development. It is designed to execute computations offchain while generating\nvalidity proofs for these computations, ensuring that they are correctly executed without compromising security. "),(0,i.kt)("li",{parentName:"ul"},"Privacy: Ola does not specifically prioritize privacy in the same way that zkVMs do. While it leverages ZKPs for scalability, its focus is on proving the correctness of\ntransactions and computations rather than ensuring that the data remains private."),(0,i.kt)("li",{parentName:"ul"},"Performance:  Ola is designed to achieve high performance, particularly in terms of transaction throughput."),(0,i.kt)("li",{parentName:"ul"},"Integration: Ola is designed to be interoperable with various layer-1 blockchains. The platform supports a hybrid ZK-rollup architecture and is expected to include bridges for cross-chain\ninteroperability, enabling assets and data to move seamlessly between the layer-1 blockchain and the Ola rollup."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: No, Ola is not a zkVM. While it leverages ZKPs (in the form of ZK-rollups) to ensure the validity of offchain computations, its primary focus is on scalability and performance\nrather than privacy or verifiable execution of arbitrary programs. Ola is more accurately described as a ZK-rollup platform aimed at improving transaction throughput and reducing transaction costs on\nlayer-1 blockchains. ")),(0,i.kt)("h2",{id:"11-miden"},"11. ","[Miden]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: Miden zkVM [",(0,i.kt)("a",{parentName:"li",href:"https://0xpolygonmiden.github.io/miden-vm/intro/main.html"},"11"),"] is a zk-STARK-based virtual machine that converts code into Miden VM instructions and proves the execution of these instructions with zero-knowledge privacy."),(0,i.kt)("li",{parentName:"ul"},"Main focus: Miden focuses on scalability and privacy for ZK-rollups, offering efficient proof generation for dapps."),(0,i.kt)("li",{parentName:"ul"},"Privacy: Miden ensures privacy for transactions and programs via zk-STARK proofs, making it suitable for private dapps."),(0,i.kt)("li",{parentName:"ul"},"Performance: Miden is optimized for scalability, with benchmarks showing its ability to handle up to 1,000 transactions per second (TPS)."),(0,i.kt)("li",{parentName:"ul"},"Integration: Miden integrates well with ZK-rollup solutions, making it ideal for L2 scaling solutions on blockchains like Ethereum."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: Yes, Miden qualifies as a zkVM, providing strong privacy and scalability for dapps and ZK-rollups.")),(0,i.kt)("h2",{id:"12-zkos"},"12. ","[ZkOS]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: ZkOS [",(0,i.kt)("a",{parentName:"li",href:"https://osblog.stephenmarz.com/index.html"},"12"),"] is a verifiable operating system focused on running zkApps in a decentralized manner. It is built on the RISC-V architecture and aims to create\na world computer where all untrusted executions can be verified."),(0,i.kt)("li",{parentName:"ul"},"Main focus: ZkOS is primarily designed to offer a proof-of-concept operating system where all executions can be verified in a trustless manner.\nHowever, its focus is more on the infrastructure for verifiable applications rather than being a traditional zkVM."),(0,i.kt)("li",{parentName:"ul"},"Privacy: ZkOS does not focus on privacy guarantees such as those found in zkVMs that generate ZKPs."),(0,i.kt)("li",{parentName:"ul"},"Performance: ZkOS focuses on the efficient execution of dapps, but performance benchmarks specific to ZKP generation are not provided."),(0,i.kt)("li",{parentName:"ul"},"Integration: ZkOS supports the execution of zkApps, but it is more of a verifiable operating system rather than a zkVM, making it distinct in its functionality."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: No, zkOS is not a zkVM. It is a verifiable operating system focused on the infrastructure to support zkApps but does not directly generate ZKPs or focus on privacy preservation.")),(0,i.kt)("h2",{id:"13-triton"},"13. ","[Triton]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: Triton [",(0,i.kt)("a",{parentName:"li",href:"https://triton-vm.org/spec/"},"13"),"] is a domain-specific language (DSL) and compiler designed primarily for high-performance GPU kernels, particularly those used in deep learning applications. "),(0,i.kt)("li",{parentName:"ul"},"Main focus: The primary goal of Triton is to optimize computation for machine learning and GPU workloads. It is focused on enhancing performance and efficiency in processing data\nrather than on ZKPs or verifiable computation."),(0,i.kt)("li",{parentName:"ul"},"Privacy: Triton does not provide ZKPs or privacy features typically associated with zkVMs. Its focus is on high-performance computation rather than cryptographic verifiability."),(0,i.kt)("li",{parentName:"ul"},"Performance: Triton is highly optimized for GPU execution, offering significant improvements in performance for computationally intensive tasks such as those found in deep learning."),(0,i.kt)("li",{parentName:"ul"},"Integration: Triton is integrated with GPU-based computation environments and is highly specialized for optimizing low-level operations on hardware rather\nthan being a general-purpose virtual machine."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: No, Triton is not a zkVM. It is a specialized tool for optimizing GPU workloads, focusing on performance rather than privacy or ZKPs.")),(0,i.kt)("h2",{id:"14-cairo"},"14. ","[Cairo]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: Cairo zkVM [",(0,i.kt)("a",{parentName:"li",href:"https://github.com/lambdaclass/cairo-vm/blob/main/docs/python_vm/README.md"},"14"),"] uses a custom language that compiles to an optimized STARK-based proof system, ensuring verifiable computation. It is primarily used in systems like Starknet."),(0,i.kt)("li",{parentName:"ul"},"Main focus: Cairo focuses on scalability and performance, using zk-STARK proofs to ensure the verifiable and secure execution of programs."),(0,i.kt)("li",{parentName:"ul"},"Privacy: Cairo provides privacy through zk-STARKs, but it focuses more on scalability and performance than privacy-first use cases."),(0,i.kt)("li",{parentName:"ul"},"Performance: Cairo is highly optimized for performance, making it well-suited for scalable applications on Starknet."),(0,i.kt)("li",{parentName:"ul"},"Integration: Cairo integrates deeply with systems like Starknet, supporting verifiable computation in a highly scalable and efficient manner."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: Yes, Cairo qualifies as a zkVM, focusing on performance and verifiable execution while being ZK-friendly.")),(0,i.kt)("h2",{id:"15-snarkos"},"15. ","[SnarkOS]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: SnarkOS [",(0,i.kt)("a",{parentName:"li",href:"https://aleo.org/post/aleo-completes-security-audits-of-snarkos-and-snarkvm/"},"15"),"] is a decentralized operating system designed to power Aleo's network, enabling secure and private dapps.\nIt manages transactions and consensus, making it a critical infrastructure component for Aleo's zkVM-based ecosystem."),(0,i.kt)("li",{parentName:"ul"},"Main focus: SnarkOS primarily focuses on securing Aleo's network through consensus mechanisms and privacy-preserving transactions rather than acting as a\nzkVM that directly proves program execution."),(0,i.kt)("li",{parentName:"ul"},"Privacy: SnarkOS supports zero-knowledge privacy through its integration with Aleo's zkVM, but the operating system itself does not generate ZKPs for arbitrary computations."),(0,i.kt)("li",{parentName:"ul"},"Performance: SnarkOS is optimized for managing dapps on the Aleo network and handling private transactions, but its focus is more on infrastructure\nand consensus than on proof generation."),(0,i.kt)("li",{parentName:"ul"},"Integration: SnarkOS integrates seamlessly with Aleo's zkVM to support private dapps and transactions, but its primary role is as a consensus layer."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: No, SnarkOS is not a zkVM. It serves as an operating system for Aleo's decentralized network, focusing on privacy and consensus rather than on generating ZKPs for computations.")),(0,i.kt)("h2",{id:"16-lurk"},"16. ","[Lurk]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: Lurk [",(0,i.kt)("a",{parentName:"li",href:"https://github.com/lurk-lab"},"16"),"] is a Turing-complete programming language designed for recursive zk-SNARKs. It focuses on enabling developers to build complex,\nrecursive ZKPs efficiently through a custom language tailored for verifiable computation."),(0,i.kt)("li",{parentName:"ul"},"Main focus: Lurk is centered around recursive proof generation rather than serving as a traditional virtual machine. Its purpose is to facilitate the creation of complex zk-SNARK-based proofs,\nmaking it a specialized tool for cryptographic proofs rather than general-purpose computation."),(0,i.kt)("li",{parentName:"ul"},"Privacy: Lurk is built for generating zk-SNARKs, which inherently provide privacy. However, Lurk itself is a language and not a zkVM that executes arbitrary programs and generates ZKPs for them."),(0,i.kt)("li",{parentName:"ul"},"Performance: Lurk is optimized for recursive zk-SNARK generation, but specific performance metrics are tied to its proof-generation capabilities rather than traditional execution environments."),(0,i.kt)("li",{parentName:"ul"},"Integration: Lurk is specialized for zk-SNARKs and may not easily integrate with other general-purpose systems, as it focuses on specific cryptographic tasks."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: No, Lurk is not a zkVM. It is a programming language designed for recursive zk-SNARKs and focuses on proof generation rather than program execution in a virtual machine environment.")),(0,i.kt)("h2",{id:"17-piecrust"},"17. ","[Piecrust]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: Piecrust [",(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/piecrust/latest/piecrust/"},"17"),"] is a WASM-based zkVM designed to run on the Dusk Network. It supports concurrent execution and focuses on providing privacy and scalability for smart contracts."),(0,i.kt)("li",{parentName:"ul"},"Main focus: Piecrust is designed to provide private and efficient execution of smart contracts through the use of ZKPs."),(0,i.kt)("li",{parentName:"ul"},"Privacy: Piecrust supports ZK-friendly computations and enhances privacy through cryptographic primitives such as Merkle trees."),(0,i.kt)("li",{parentName:"ul"},"Performance: Piecrust is designed to be scalable and concurrent, allowing multiple sessions to run simultaneously, which improves overall performance."),(0,i.kt)("li",{parentName:"ul"},"Integration: Piecrust integrates with the Dusk Network and supports private smart contracts, making it ideal for dapps."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: Yes, Piecrust qualifies as a zkVM, offering scalability, privacy, and support for succinct proof generation.")),(0,i.kt)("h2",{id:"18-ceno"},"18. ","[Ceno]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: Ceno [",(0,i.kt)("a",{parentName:"li",href:"https://eprint.iacr.org/2024/387"},"18"),"] is a zkVM that provides a theoretical framework for reducing proving time by grouping common portions of code together. It uses recursive proofs to enhance prover efficiency."),(0,i.kt)("li",{parentName:"ul"},"Main focus: Ceno aims to optimize prover performance through recursive proofs, making it a powerful tool for handling complex computations efficiently."),(0,i.kt)("li",{parentName:"ul"},"Privacy: Ceno supports zero-knowledge privacy through recursive proofs and is designed to handle large-scale computations securely."),(0,i.kt)("li",{parentName:"ul"},"Performance: Ceno's recursive proof framework ensures that it can efficiently prove the execution of programs, reducing the time required for proof generation."),(0,i.kt)("li",{parentName:"ul"},"Integration: Ceno can be integrated into systems that require high efficiency and privacy, particularly those handling complex, repeated computations."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: Yes, Ceno qualifies as a zkVM, providing efficient and private computation through the use of recursive proofs.")),(0,i.kt)("h2",{id:"19-stellar"},"19. ","[Stellar]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: Stellar [",(0,i.kt)("a",{parentName:"li",href:"https://stellar.org/blog/developers/zkvm-a-new-design-for-fast-confidential-smart-contracts"},"19"),"] is a decentralized protocol designed to facilitate cross-border transactions between digital and fiat currencies."),(0,i.kt)("li",{parentName:"ul"},"Main focus: Stellar's primary goal is to improve financial transactions by enabling decentralized, low-cost currency transfers. It does not aim to provide ZKPs or run verifiable computations\nlike a zkVM."),(0,i.kt)("li",{parentName:"ul"},"Privacy: Stellar focuses on confidentiality and security for financial transactions, but it does not employ ZKPs in the way zkVMs do for verifying computation without revealing data."),(0,i.kt)("li",{parentName:"ul"},"Performance: Stellar prioritizes the performance of financial transactions, ensuring low latency and high throughput across its decentralized network.\nHowever, this performance focus is specific to transactions rather than general-purpose program execution."),(0,i.kt)("li",{parentName:"ul"},"Integration: Stellar is designed for integration with financial systems, enabling currency conversions and transfers, but it is not built for executing smart contracts or verifiable computations."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: No, Stellar is not a zkVM. It is a decentralized financial protocol focused on facilitating cross-border payments rather than verifiable or privacy-preserving computation.")),(0,i.kt)("h2",{id:"20-novanet"},"20. ","[NovaNet]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: NovaNet [",(0,i.kt)("a",{parentName:"li",href:"https://www.novanet.xyz/blog"},"20"),"] is an open peer-to-peer network that aims to build upon concepts of non-uniform incremental verifiable computation. "),(0,i.kt)("li",{parentName:"ul"},"Main focus: NovaNet's focus is on peer-to-peer networking and decentralized computing rather than on proving the execution of programs in a zero-knowledge manner."),(0,i.kt)("li",{parentName:"ul"},"Privacy: NovaNet does not provide ZKPs or privacy features typically associated with zkVMs. Its focus is on decentralized networking and computation."),(0,i.kt)("li",{parentName:"ul"},"Performance: NovaNet prioritizes efficient decentralized computation but does not focus on privacy or performance benchmarks related to ZKPs."),(0,i.kt)("li",{parentName:"ul"},"Integration: NovaNet is built for decentralized networks but is not designed to integrate with systems requiring verifiable computation or ZKP generation."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: No, NovaNet is not a zkVM. It is a decentralized peer-to-peer network focused on distributed computing rather than zero-knowledge computation.")),(0,i.kt)("h2",{id:"21-zkllvm"},"21. ","[ZkLLVM]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: ZkLLVM [",(0,i.kt)("a",{parentName:"li",href:"https://github.com/NilFoundation/zkLLVM"},"21"),"] is a compiler that transforms C++ or Rust code into circuits for use in zk-SNARK or zk-STARK systems. Its primary purpose is to bridge high-level programming\nlanguages with ZKP systems by compiling code into arithmetic circuits that can be used to generate and verify proofs."),(0,i.kt)("li",{parentName:"ul"},"Main focus: ZkLLVM focuses on making ZKPs accessible to developers by enabling them to write code in familiar languages (C++, Rust) and then compile that code into ZK circuits."),(0,i.kt)("li",{parentName:"ul"},"Privacy: ZkLLVM enables the generation of ZKPs by compiling high-level code into ZK-compatible circuits. It plays a crucial role in privacy-preserving applications but does not act\nas a zkVM itself."),(0,i.kt)("li",{parentName:"ul"},"Performance: ZkLLVM allows for the performance of ZKPs to be closely tied to the complexity of the compiled circuits. The performance depends on the underlying\nzk-SNARK or zk-STARK system used."),(0,i.kt)("li",{parentName:"ul"},"Integration: ZkLLVM integrates with zk-SNARK and zk-STARK proof systems, making it useful for a variety of privacy-focused applications, but it does not serve as a zkVM\nfor general-purpose computation."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: No, zkLLVM is not a zkVM. It is a compiler that transforms high-level code into ZK circuits, enabling ZKPs but not acting as a virtual machine for executing and proving programs.")),(0,i.kt)("h2",{id:"22-zkmove"},"22. ","[ZkMove]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: ZkMove [",(0,i.kt)("a",{parentName:"li",href:"https://www.zkmove.net/2023-06-20-zkMove-0.2.0-Achieving-Full-Bytecode-Compatibility-with-Move/"},"22"),"] is a zkVM designed to execute smart contracts written in the Move language. It utilizes ZKPs to ensure that the execution of these contracts remains verifiable and secure."),(0,i.kt)("li",{parentName:"ul"},"Main focus: ZkMove focuses on privacy and verifiable execution for Move-based smart contracts, providing a framework for ZK-friendly computation."),(0,i.kt)("li",{parentName:"ul"},"Privacy: ZkMove ensures that smart contract execution remains private through ZKPs, making it suitable for privacy-preserving applications."),(0,i.kt)("li",{parentName:"ul"},"Performance: ZkMove is optimized for verifiable execution, ensuring that contracts can be proven correct while preserving privacy."),(0,i.kt)("li",{parentName:"ul"},"Integration: ZkMove integrates well with systems that use the Move language, particularly in environments that require private smart contract execution."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: Yes, zkMove qualifies as a zkVM, offering ZK-friendly execution and privacy for smart contracts written in the Move language.")),(0,i.kt)("h2",{id:"23-o1vm"},"23. ","[O1VM]"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overview: O1VM [",(0,i.kt)("a",{parentName:"li",href:"https://github.com/o1-labs/proof-systems/tree/master/o1vm"},"23"),"] is a general-purpose zkVM developed by o1Labs. It is designed to prove the execution of MIPS programs efficiently through a combination of zk-SNARKs\nand specialized techniques like folding schemes and RAMLookups."),(0,i.kt)("li",{parentName:"ul"},"Main focus: O1VM focuses on scalability and verifiable computation for MIPS-based programs, making it a strong contender for executing and proving complex programs efficiently."),(0,i.kt)("li",{parentName:"ul"},"Privacy: O1VM ensures privacy through zk-SNARK proofs, keeping the details of the computation private while proving its correctness."),(0,i.kt)("li",{parentName:"ul"},"Performance: O1VM is optimized for handling long execution traces and complex computations, making it highly scalable."),(0,i.kt)("li",{parentName:"ul"},"Integration: O1VM integrates well with MIPS-based architectures and systems that require privacy-preserving computation."),(0,i.kt)("li",{parentName:"ul"},"Conclusion: Yes, o1VM qualifies as a zkVM, providing privacy, scalability, and strong proof generation for MIPS programs.")),(0,i.kt)("h1",{id:"summary-of-findings"},"Summary of findings"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Project name"),(0,i.kt)("th",{parentName:"tr",align:null},"ZkVM status"),(0,i.kt)("th",{parentName:"tr",align:null},"Zero knowledge"),(0,i.kt)("th",{parentName:"tr",align:null},"Reasoning/comments"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"SP1")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Proves execution of LLVM-based programs but lacks privacy features.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Nexus")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Strong proof generation but lacks zero-knowledge privacy due to Spartan.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Risc0")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Supports full ZKP generation for Rust programs.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Powdr")),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Toolkit for creating custom zkVMs, not a zkVM itself.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"ZkMIPS")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Supports MIPS-like architecture with full zero-knowledge and proof generation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Valida")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Performance-focused zkVM, lacks privacy guarantees.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Jolt")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Performance-focused zkVM, does not achieve zero-knowledge privacy.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"ZkWASM")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Full zero-knowledge and verifiable execution of WebAssembly code.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Aleo")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Fully private and scalable dapps.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Ola")),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Primarily a ZK-rollup platform, not a zkVM, focusing on scalability and performance rather than privacy.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Miden")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Zk-STARK-based zkVM with strong privacy and scalability.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"ZkOS")),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Verifiable operating system focused on zkApps, not a zkVM.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Triton")),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Optimizes GPU workloads but not designed for ZKPs.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Cairo")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"ZK-friendly"),(0,i.kt)("td",{parentName:"tr",align:null},"Custom Rust-based language with zk-STARK proof generation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"SnarkOS")),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Decentralized OS for Aleo's network, focuses on consensus rather than verifiable computation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Lurk")),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Programming language for recursive zk-SNARKs, not a zkVM.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Piecrust")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"ZK-friendly"),(0,i.kt)("td",{parentName:"tr",align:null},"ZkVM with recursive SNARK capabilities, focused on succinct proof generation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Ceno")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Theoretical zkVM improving prover efficiency through recursive proofs.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Stellar")),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Focuses on cross-border transactions, not ZK-proof generation or verifiable computation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"NovaNet")),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Peer-to-peer network focused on distributed computing, not zero-knowledge computation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"ZkLLVM")),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes, in some cases"),(0,i.kt)("td",{parentName:"tr",align:null},"Compiler for generating ZK-circuits, not a zkVM.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"ZkMove")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"ZK-friendly"),(0,i.kt)("td",{parentName:"tr",align:null},"ZkVM supporting Move language with ZKP execution.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"O1VM")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes"),(0,i.kt)("td",{parentName:"tr",align:null},"MIPS-based zkVM with strong privacy, scalability, and proof generation.")))),(0,i.kt)("h1",{id:"insights-and-conclusions"},"Insights and conclusions"),(0,i.kt)("p",null,"Our analysis reveals that many of the projects labeled as zkVMs do meet the core criteria for zkVMs, offering verifiable computation and proof generation\nas foundational features. However, a number of these projects fall short of delivering full zero-knowledge privacy. Projects like Risc0, Aleo, and Miden stand out as leading zkVM frameworks\nthat balance proof generation, privacy, and scalability, offering strong platforms for developers seeking to build privacy-preserving applications."),(0,i.kt)("p",null,"Conversely, projects like SP1 and Nexus excel in generating verifiable proofs but currently lack comprehensive zero-knowledge privacy mechanisms. These platforms are excellent for\nscenarios where proof generation and scalability are paramount, but privacy is not a primary concern."),(0,i.kt)("p",null,"As zkVM technology continues to evolve, we expect to see more projects integrating enhanced privacy-preserving mechanisms while simultaneously improving performance and scalability.\nThis ongoing development will likely broaden the application of zkVMs across the blockchain ecosystem, particularly in privacy-sensitive sectors such as finance, data security,\nand decentralized applications."),(0,i.kt)("p",null,"What are your thoughts on our zkVM analysis? Do you agree with our findings, or do you know of other zkVM projects that should be on our radar? We would love to hear your insights, questions,\nor suggestions! Feel free to join the ",(0,i.kt)("a",{parentName:"p",href:"https://forum.vac.dev/t/exploring-zkvms-which-projects-truly-qualify-as-zero-knowledge-virtual-machines/317"},"discussion")," on our forum."),(0,i.kt)("h1",{id:"references"},"References"),(0,i.kt)("p",null,"[1]"," Introducing SP1: A performant, 100% open-source, contributor-friendly zkVM. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://blog.succinct.xyz/introducing-sp1/"},"https://blog.succinct.xyz/introducing-sp1/")),(0,i.kt)("p",null,"[2]"," The Nexus 2.0 zkVM. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://docs.nexus.xyz/"},"https://docs.nexus.xyz/")),(0,i.kt)("p",null,"[3]"," The first general purpose zkVM. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://www.risczero.com/zkvm"},"https://www.risczero.com/zkvm")),(0,i.kt)("p",null,"[4]"," Powdr. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://docs.powdr.org/"},"https://docs.powdr.org/")),(0,i.kt)("p",null,"[5]"," ZKM Architecture. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://docs.zkm.io/zkm-architecture"},"https://docs.zkm.io/zkm-architecture")),(0,i.kt)("p",null,"[6]"," Valida zkVM Design. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://delendum.xyz/writings/2023-05-10-zkvm-design.html"},"https://delendum.xyz/writings/2023-05-10-zkvm-design.html")),(0,i.kt)("p",null,"[7]"," Building Jolt: A fast, easy-to-use zkVM. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://a16zcrypto.com/posts/article/building-jolt/"},"https://a16zcrypto.com/posts/article/building-jolt/")),(0,i.kt)("p",null,"[8]"," ZK-WASM. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://delphinuslab.com/zk-wasm/"},"https://delphinuslab.com/zk-wasm/")),(0,i.kt)("p",null,"[9]"," Aleo. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://aleo.org/blog/"},"https://aleo.org/blog/")),(0,i.kt)("p",null,"[10]"," OlaVM Whitepaper V2. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Sin7Y/olavm-whitepaper-v2/tree/master"},"https://github.com/Sin7Y/olavm-whitepaper-v2/tree/master")),(0,i.kt)("p",null,"[11]"," Polygon Miden VM. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://0xpolygonmiden.github.io/miden-vm/intro/main.html"},"https://0xpolygonmiden.github.io/miden-vm/intro/main.html")),(0,i.kt)("p",null,"[12]"," The Adventures of OS: Making a RISC-V Operating System using Rust. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://osblog.stephenmarz.com/index.html"},"https://osblog.stephenmarz.com/index.html")),(0,i.kt)("p",null,"[13]"," Triton VM. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://triton-vm.org/spec/"},"https://triton-vm.org/spec/")),(0,i.kt)("p",null,"[14]"," How does the original Cairo VM work?. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lambdaclass/cairo-vm/blob/main/docs/python_vm/README.md"},"https://github.com/lambdaclass/cairo-vm/blob/main/docs/python_vm/README.md")),(0,i.kt)("p",null,"[15]"," Aleo completes security audits of snarkOS & snarkVM. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://aleo.org/post/aleo-completes-security-audits-of-snarkos-and-snarkvm/"},"https://aleo.org/post/aleo-completes-security-audits-of-snarkos-and-snarkvm/")),(0,i.kt)("p",null,"[16]"," Lurk zkVM. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/lurk-lab"},"https://github.com/lurk-lab")),(0,i.kt)("p",null,"[17]"," Piecrust VM. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/piecrust/latest/piecrust/"},"https://docs.rs/piecrust/latest/piecrust/")),(0,i.kt)("p",null,"[18]"," Ceno: Non-uniform, Segment and Parallel Zero-knowledge Virtual Machine. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://eprint.iacr.org/2024/387"},"https://eprint.iacr.org/2024/387")),(0,i.kt)("p",null,"[19]"," ZkVM: a new design for fast, confidential smart contracts. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://stellar.org/blog/developers/zkvm-a-new-design-for-fast-confidential-smart-contracts"},"https://stellar.org/blog/developers/zkvm-a-new-design-for-fast-confidential-smart-contracts")),(0,i.kt)("p",null,"[20]"," Novanet. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://www.novanet.xyz/blog"},"https://www.novanet.xyz/blog")),(0,i.kt)("p",null,"[21]"," ZKLLVM. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/NilFoundation/zkLLVM"},"https://github.com/NilFoundation/zkLLVM")),(0,i.kt)("p",null,"[22]"," zkMove 0.2.0 - Achieving Full Bytecode Compatibility with Move. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://www.zkmove.net/2023-06-20-zkMove-0.2.0-Achieving-Full-Bytecode-Compatibility-with-Move/"},"https://www.zkmove.net/2023-06-20-zkMove-0.2.0-Achieving-Full-Bytecode-Compatibility-with-Move/")),(0,i.kt)("p",null,"[23]"," O1VM. Retrieved from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/o1-labs/proof-systems/tree/master/o1vm"},"https://github.com/o1-labs/proof-systems/tree/master/o1vm")))}u.isMDXComponent=!0},3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var r=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(a),d=i,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||n;return a?r.createElement(k,o(o({ref:t},c),{},{components:a})):r.createElement(k,o({ref:t},c))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,o=new Array(n);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<n;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);