"use strict";(self.webpackChunkvac_dev=self.webpackChunkvac_dev||[]).push([[3736],{25115:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});var t=s(84468),i=s(74848),r=s(28453);const a={title:"Decentralized Message Layer Security (De-MLS) with Waku",date:new Date("2025-09-02T14:00:00.000Z"),authors:"seemenkina",published:!0,slug:"de-mls-with-waku",categories:"research",toc_min_heading_level:2,toc_max_heading_level:4},o=void 0,c={authorsImageUrls:[void 0]},l=[{value:"Introduction",id:"introduction",level:2},{value:"Background",id:"background",level:2},{value:"MLS",id:"mls",level:3},{value:"Waku",id:"waku",level:3},{value:"de-MLS",id:"de-mls",level:2},{value:"Waku Integration",id:"waku-integration",level:3},{value:"Flow",id:"flow",level:3},{value:"1. Steward joins the welcome topic",id:"1-steward-joins-the-welcome-topic",level:3},{value:"2. Group initialization",id:"2-group-initialization",level:3},{value:"3. Emitting Group Anouncement (GA) by Steward",id:"3-emitting-group-anouncement-ga-by-steward",level:3},{value:"4. User joins the welcome topic",id:"4-user-joins-the-welcome-topic",level:3},{value:"5. User creates its key package",id:"5-user-creates-its-key-package",level:3},{value:"6. Steward receives the User&#39;s key package",id:"6-steward-receives-the-users-key-package",level:3},{value:"7. Creation of Voting proposals",id:"7-creation-of-voting-proposals",level:3},{value:"8. Voting for proposal",id:"8-voting-for-proposal",level:3},{value:"9. Creating commit message",id:"9-creating-commit-message",level:3},{value:"10. Sending messages",id:"10-sending-messages",level:3},{value:"11. Applying welcome message",id:"11-applying-welcome-message",level:3},{value:"Benchmark",id:"benchmark",level:2},{value:"Potential drawbacks and countermeasures",id:"potential-drawbacks-and-countermeasures",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Future Work",id:"future-work",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This post introduces de-MLS, a decentralized variant of Message Layer Security (MLS)\nthat reimagines group messaging by replacing centralized delivery services with peer-to-peer protocols\nwhile retaining strong guarantees such as forward secrecy (FS) and post-compromise security (PCS)."}),"\n","\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Secure Group Messaging (SGM) is resource-intensive when aiming for robust security features\nlike forward secrecy (FS) and post-compromise security (PCS)."}),"\n",(0,i.jsx)(n.p,{children:"One straightforward approach to SGM is a pairwise group chat,\nwhere each pair of group members establishes a unique encryption key using Diffie-Hellman.\nWhile this method ensures security, it falls short in terms of practicality:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"High storage requirements"}),": Each participant must store encryption keys for every other participant."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inefficient encryption"}),": Each message must be encrypted separately for every participant,\nleading to significant computational overhead."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inefficient message storage and delivery"}),": Each separately encrypted message must then be sent over the wire,\nwhatever this wire might be. Or stored in database."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cumbersome group management"}),": Adding or removing users and refreshing keys becomes\nincreasingly inefficient as the group grows."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["One scalable for Secure Group Messaging (SGM) is Message Layer Security (MLS), as standardized in ",(0,i.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/rfc9420/",children:"RFC 9420"}),".\nLeveraging TreeKEM, MLS organizes group members in a cryptographic tree structure,\nwhere each participant is responsible for maintaining specific parts of the tree."]}),"\n",(0,i.jsx)(n.p,{children:"While MLS offers scalability and strong security guarantees,\nits reliance on server-based delivery services poses limitations for fully decentralized environments."}),"\n",(0,i.jsx)(n.p,{children:"In this post, we present the implementation details of the first version of Decentralized MLS (de-MLS)\nwhich is an SGM protocol. De-MLS can serve groups that cannot rely on central servers,\nsuch as journalists and activists seeking secure communication.\nIt is also well suited for DAOs, where Ethereum-based authentication can restrict access to members\nholding a minimum ETH balance, and for NGOs or research consortia that prefer not to host their own servers while still\nrequiring end-to-end encrypted group messaging. Decentralized MLS (de-MLS) satisfies the following features:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Decentralized"}),"\n",(0,i.jsx)(n.li,{children:"Scalable"}),"\n",(0,i.jsx)(n.li,{children:"End-to-end encrypted (E2EE)"}),"\n",(0,i.jsx)(n.li,{children:"FS and PCS provided"}),"\n",(0,i.jsx)(n.li,{children:"Ethereum authenticated"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,i.jsx)(n.h3,{id:"mls",children:"MLS"}),"\n",(0,i.jsx)(n.p,{children:"The Message Layer Security (MLS) protocol offers scalable and secure group messaging protocol\nby organizing participants into a cryptographic tree structure,\nenabling efficient operations like adding or removing members with logarithmic time complexity\nrelative to the group size. MLS provides strong security guarantees, including FS and PCS."}),"\n",(0,i.jsx)(n.p,{children:"MLS assumes that two services are provided:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"An Authentication Service (AS): It enables group members to\nauthenticate the credentials presented by other group members."}),"\n",(0,i.jsxs)(n.li,{children:["A Delivery Service (DS) that routes MLS messages among the\nparticipants in the protocol in the correct order and manage the ",(0,i.jsx)(n.code,{children:"keyPackage"})," of the users\nwhere the ",(0,i.jsx)(n.code,{children:"keyPackage"})," is the objects that provide some public information about a user."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Despite its scalability, MLS has a notable limitation:\nit is inherently designed for server-based federated architectures for delivery service (DS),\neven when the servers themselves don't need to be trusted.\nTo achieve a decentralized protocol, the functionality of DS must be reimagined\nto eliminate reliance on a central server while preserving the protocol's security properties.\nThus, we proposed decentralized MLS (de-MLS),\nleveraging Waku nodes as peer-to-peer communication protocols to eliminate reliance on centralized servers."}),"\n",(0,i.jsxs)(n.p,{children:["Lastly, MLS operates on an epoch-based model,\nwhere group state changes (e.g., adding/removing users or key refreshes) occur between epochs\nthat are always required to be conducted by a single entity.\nFor example, if a user is removed in epoch ",(0,i.jsx)(n.code,{children:"E"}),",\nthe rest of the group members generate a new key in epoch ",(0,i.jsx)(n.code,{children:"E + 1"})," by passing the new entropy.\nThe removed user cannot decrypt messages sent after epoch ",(0,i.jsx)(n.code,{children:"E + 1"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"waku",children:"Waku"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://waku.org/",children:"Waku"})," is a decentralized messaging protocol designed for secure and efficient communication in peer-to-peer networks.\nIt operates as a broadcast-based routing layer where content topics can be used to tag and filter messages.\nUsers join channels by subscribing to specific content topics,\nwhich determine the scope and type of messages exchanged.\nThis enables flexible and efficient communication patterns in a decentralized environment."]}),"\n",(0,i.jsx)(n.h2,{id:"de-mls",children:"de-MLS"}),"\n",(0,i.jsxs)(n.p,{children:["Decentralized MLS (de-MLS) is a peer-to-peer secure group messaging protocol\nthat can work with any delivery service (DS) meeting a minimal set of requirements.\nIn this post, we highlight its integration with ",(0,i.jsx)(n.a,{href:"https://waku.org/",children:"Waku"})," as the messaging protocol,\nwhile emphasizing that de-MLS itself remains agnostic to the underlying DS.\nFurther technical details can be found in the ",(0,i.jsx)(n.a,{href:"https://rfc.vac.dev/vac/raw/eth-mls-offchain",children:"de-MLS RFC"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Decentralization is achieved not only at the delivery service (DS) level\nbut also within the authentication service (AS).\nMultiple special nodes named Steward in the group serve as authorized identities to authenticate users\nbefore they join or are removed from the group transparently."}),"\n",(0,i.jsx)(n.p,{children:"de-MLS provides two different user management configurations, both utilizing the Waku protocol for DS:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single Steward"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A single authorized identity (Steward) manages the group,\nincluding removing or adding users with agreement among users by a voting-based consensus."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-Steward"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Multiple Stewards have equal authority to add or remove users."}),"\n",(0,i.jsx)(n.li,{children:"A consensus mechanism ensures consistency by resolving concurrent changes\nwithin the same epoch and preventing possible conflicts.\nIn each epoch, all modifications are managed exclusively by a single Steward."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Note: We chose the term Steward to reflect the role of transparently coordinating and organizing passengers at stations, much like Stewards do in transit systems."}),"\n",(0,i.jsx)(n.p,{children:"In multi-Steward settings, de-MLS requires a consensus among Stewards\nthat have equal rights in the group since changes in an epoch in MLS are required\nto be conducted by a single identity, that is the Steward."}),"\n",(0,i.jsx)(n.p,{children:"For the consensus integration, ongoing research explores two promising approaches:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"On-chain consensus mechanisms"}),":\nOutsourcing consensus to a smart contract solution for transparent and immutable agreement."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Off-chain consensus mechanisms"}),":\nUtilizing off-chain consensus protocols to design efficient, decentralized protocols."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"waku-integration",children:"Waku Integration"}),"\n",(0,i.jsx)(n.p,{children:"Waku integration is a crucial step in the construction of de-MLS,\naiming to replace traditional client-server communication with decentralized messaging.\nThe specifics of Waku integration will be detailed in a separate RFC;\nfor now, our main priority is the de-MLS RFC."}),"\n",(0,i.jsx)(n.p,{children:"The main challenge in this transition is transforming the centralized Delivery Service (DS)\ninto a decentralized equivalent, which performs two essential functions:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Message Delivery and Ordering:\nThe DS is responsible not only for delivering messages to the correct recipients,\nbut also for preserving the correct order of these messages, which is critical for the consistency of group state."}),"\n",(0,i.jsx)(n.li,{children:"Key Package Management:\nThe DS manages key packages, which are essential for adding members securely to a group."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"To maintain a truly decentralized architecture,\nkey packages cannot be stored in a centralized location.\nInitially, we considered using a smart contract (SC) as a decentralized substitute for server-side key package storage.\nHowever, this approach proved impractical.\nBlockchains are immutable by design\u2014once data is written, it cannot be fully removed.\nThis contradicts a core requirement of MLS: each key package must be used exactly once and then deleted,\nto prevent replay or reuse attacks.\nInstead, our solution is to require users to actively provide their key packages upon request,\nallowing validation at the moment of use without persistent storage.\nWhile this approach may lose some benefits of asynchronicity,\nwe plan to address this in the future by introducing store nodes that can temporarily hold key packages.\nThis ensures both compliance with MLS's security model and alignment with decentralized system principles."}),"\n",(0,i.jsx)(n.h3,{id:"flow",children:"Flow"}),"\n",(0,i.jsx)(n.p,{children:"The flow section explains the processes that\nwhen a user wants to join a group in both Steward and users side also their interactions.\nThe flow of de-MLS is as follows:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Figure 1",src:s(58834).A+"",width:"921",height:"627"})}),"\n",(0,i.jsx)(n.h3,{id:"1-steward-joins-the-welcome-topic",children:"1. Steward joins the welcome topic"}),"\n",(0,i.jsx)(n.p,{children:"The welcome topic is a topic created and monitored by the Steward for a specific secure messaging group,\nallowing any Waku node to subscribe permissionlessly.\nBeing in the welcome topic does not imply group membership,\nit acts as a waiting room where users can send their key material,\nwhich the Steward listens for and processes before granting access to the secure group."}),"\n",(0,i.jsx)(n.h3,{id:"2-group-initialization",children:"2. Group initialization"}),"\n",(0,i.jsx)(n.p,{children:"Steward initalizes a group with parameters such as cipher suite and group ID."}),"\n",(0,i.jsx)(n.h3,{id:"3-emitting-group-anouncement-ga-by-steward",children:"3. Emitting Group Anouncement (GA) by Steward"}),"\n",(0,i.jsx)(n.p,{children:"Steward creates group announcement (GA) periodically to the welcome channel\nthat the users can find the who the Steward is.\nThis will be important for the next step."}),"\n",(0,i.jsx)(n.h3,{id:"4-user-joins-the-welcome-topic",children:"4. User joins the welcome topic"}),"\n",(0,i.jsxs)(n.p,{children:["As first, the users who wants to be part of the decentralized MLS should subscribe the welcome channel.\nThen user can find the group name and also corresponding GA message from Steward.\nThis GA message helps the user to create a valid ",(0,i.jsx)(n.code,{children:"keyPackages"})," which define in section 10\nin ",(0,i.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/rfc9420/",children:"RFC9420"})," for the group."]}),"\n",(0,i.jsx)(n.h3,{id:"5-user-creates-its-key-package",children:"5. User creates its key package"}),"\n",(0,i.jsxs)(n.p,{children:["User creates the ",(0,i.jsx)(n.code,{children:"keyPackage"})," and encrypt by public key of the Steward then send it to the Steward.\nSince the message is encrypted, stay secure though the welcome (permissionless) topic."]}),"\n",(0,i.jsx)(n.h3,{id:"6-steward-receives-the-users-key-package",children:"6. Steward receives the User's key package"}),"\n",(0,i.jsxs)(n.p,{children:["Steward receives the user's ",(0,i.jsx)(n.code,{children:"keyPackage"})," and decrypt it.\nAfter decrypted, Steward also verifies the validity of the ",(0,i.jsx)(n.code,{children:"keyPackage"})," by signature verification.\nIf the ",(0,i.jsx)(n.code,{children:"keyPackage"})," is not valid, the Steward just drops the message,\notherwise it moves to the next step which is proposal creation."]}),"\n",(0,i.jsx)(n.h3,{id:"7-creation-of-voting-proposals",children:"7. Creation of Voting proposals"}),"\n",(0,i.jsxs)(n.p,{children:["Voting proposals are special MLS application messages that may come from any participant, including the Steward.\nIn this context, any member can create a proposal corresponding to the user\u2019s ",(0,i.jsx)(n.code,{children:"keyPackage"}),".\nIn regular MLS, proposals are automatically converted into commit messages,\nwhich can change the structure of the tree. However, in de-MLS, since the process is decentralized,\nproposals must be voted on before being converted into a commitment."]}),"\n",(0,i.jsx)(n.h3,{id:"8-voting-for-proposal",children:"8. Voting for proposal"}),"\n",(0,i.jsx)(n.p,{children:"Voting applies decentralization by protecting small groups can control.\nTherefore, proposals must be voted on before committing.\nThe consensus mechanism should be a lightweight consensus that cannot be a bottleneck for treeKEM scalability.\nBasically, the consensus returns the binary result for a given proposal.\nIf voting result is NO, the proposal is dropped; otherwise, the Steward transforms it into an MLS proposal.\nMLS proposal message is a distinct type of MLS application message,\nwhere the Steward attaches the voting result instead of directly releasing a commit message."}),"\n",(0,i.jsx)(n.h3,{id:"9-creating-commit-message",children:"9. Creating commit message"}),"\n",(0,i.jsx)(n.p,{children:"Commit messages are the messages that start new epochs.\nThey include key and tree material that existing members can use to generate the new state of the tree."}),"\n",(0,i.jsx)(n.p,{children:"After Steward gets the YES from consensus, Steward creates commit messages\nthat injects new entropy for the existing group members."}),"\n",(0,i.jsx)(n.h3,{id:"10-sending-messages",children:"10. Sending messages"}),"\n",(0,i.jsx)(n.p,{children:"After Steward creates and then sends two messages:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Commit message informs existing group member to update their key\nto align with the new member\u2019s key for the upcoming epoch."}),"\n",(0,i.jsx)(n.li,{children:"The welcome message informs the newly joined user to generate a group key\nthat matches the key existing members will use in the upcoming epoch."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Although existing users had different group keys in the previous epoch and the new user had none,\nthe Steward message ensures that both existing and new users converge on the same group key in the next epoch."}),"\n",(0,i.jsx)(n.h3,{id:"11-applying-welcome-message",children:"11. Applying welcome message"}),"\n",(0,i.jsxs)(n.p,{children:["User can generate the next epoch group key by using the welcome message as well as\nexisting users extract the same ",(0,i.jsx)(n.code,{children:"groupKey"})," by using commit messages."]}),"\n",(0,i.jsxs)(n.p,{children:["The commit message helps existing members generate the next group key ",(0,i.jsx)(n.code,{children:"Gk+1"}),",\nwhile the welcome message helps the newly joining user generate the same ",(0,i.jsx)(n.code,{children:"Gk+1"}),".\nThis provides two important security properties:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Forward Secrecy (FS):\nThe new user cannot read previous messages since they were encrypted with the old key ",(0,i.jsx)(n.code,{children:"Gk"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Post-Compromise Security (PCS):\nIf a user is removed from the group,\nthey cannot read future messages since those messages will be encrypted with the new key ",(0,i.jsx)(n.code,{children:"Gk+1"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"benchmark",children:"Benchmark"}),"\n",(0,i.jsx)(n.p,{children:"This section presents the performance evaluation of de-MLS.\nOne of the key advantages of the MLS protocol is its efficiency,\nas it eliminates the need for pairwise message exchanges between all participants.\nInstead, the decentralized DS enables the addition of new participants by sending only two messages to the group:\na commit message and a welcome message.\nHowever, despite this advantage, the protocol does have certain bottlenecks, which are as follows:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Firstly, the Steward must receive the key packages from each member wishing to join the group.\nThis process requires sequential message exchanges and involves computationally intensive tasks such as encryption,\ndecryption, and digital signature verification.\nEven when multiple users are added to the group simultaneously, the process is essentially sequential.\nThe tree structure is updated one user at a time,\nfollowed by sending the final commit message to the existing group members\nand a single welcome message to the new members."}),"\n",(0,i.jsx)(n.li,{children:"Secondly adding a member to a group requires rebuilding the tree and computing new keys."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The following measurements were made as follows:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The time required for the entire sequence of receiving a user key package is presented here.\nThis includes generating the Steward key, creating messages with signatures and encryption,\nand processing these messages."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"Share Key Package - 1.8395 ms"})}),"\n",(0,i.jsx)(n.p,{children:"Note that these measurements do not account for the time taken to forward messages."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The time required for creating the commit and welcome message\nfrom a ready-made package bunches is shown in this table."}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Group Size (by users)"}),(0,i.jsx)(n.th,{children:"Time"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"10"}),(0,i.jsx)(n.td,{children:"1.8662 ms"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"100"}),(0,i.jsx)(n.td,{children:"14.124 ms"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"500"}),(0,i.jsx)(n.td,{children:"121.85 ms"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1000"}),(0,i.jsx)(n.td,{children:"412.39 ms"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"5000"}),(0,i.jsx)(n.td,{children:"~ 15-20 s"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"10000"}),(0,i.jsx)(n.td,{children:"~ 1-1.5 min"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"The tests were conducted on the following configuration:\nApple M3 Pro @ 4.05GHz and 12-Core CPU/18-Core GPU."}),"\n",(0,i.jsx)(n.p,{children:"Here, the network latency and the time taken by users to apply the received commits are also excluded.\nThese aspects are planned to be measured and evaluated in future work."}),"\n",(0,i.jsx)(n.h2,{id:"potential-drawbacks-and-countermeasures",children:"Potential drawbacks and countermeasures"}),"\n",(0,i.jsx)(n.p,{children:"Since de-MLS replace the servers by P2P, we could lose some good features of servers based MLS.\nIn this section we present the potential drawbacks and possible countermeasures of de-MLS."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Offline users: ",(0,i.jsx)(n.code,{children:"keyPackage"}),"s are provided by the users directly without any storing,\nthis is required each user must be online for joining to a group.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We can consider to use ",(0,i.jsx)(n.a,{href:"https://docs.waku.org/guides/js-waku/store-retrieve-messages/",children:"Waku sync nodes"}),"\nthat are nodes has storing ability for a temporary storing of ",(0,i.jsx)(n.code,{children:"keyPackage"}),"s."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["DoS attack to Steward: Steward is known in welcome message from periodic group announcement message\nso Steward can be targeted for DoS attack.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"As always we consider to use Rate-Limiting Nullifier (RLN) with Waku to protect network from spam."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Message loss or delay : Because of P2P and consensus settings, message can be lost or delayed.,","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We can integrate reliability mechanisms to Waku such as\n",(0,i.jsx)(n.a,{href:"https://github.com/waku-org/nim-sds",children:"scalable data sync (SDS)"})]}),"\n",(0,i.jsx)(n.li,{children:"Consensus mechanism requires to provide liveness property against offline nodes, for example,\nit may provides default YES or NO options for a silent users who do not vote."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Enchanced authentication","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ethereum authentication could be inefficient.\nWe can configure the authentication mechanism for example asking minimum balance or etc."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"To summarize, the approach to solving decentralized DS tasks with Waku\ncan be outlined as shown in the comparison table:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Feature"}),(0,i.jsx)(n.th,{children:"MLS"}),(0,i.jsx)(n.th,{children:"de-MLS"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Message Distribution"}),(0,i.jsx)(n.td,{children:"Messages are sent from the server to clients"}),(0,i.jsx)(n.td,{children:"Messages are sent by publishing/subscribing to pub-sub topics"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Commit Message Handling"}),(0,i.jsx)(n.td,{children:"Relies on a server"}),(0,i.jsx)(n.td,{children:"Relies on a consensus and transparent Steward"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Key Package Management"}),(0,i.jsx)(n.td,{children:"Key packages are stored and distributed by the server"}),(0,i.jsx)(n.td,{children:"Key packages are provided by the users themselves"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"future-work",children:"Future Work"}),"\n",(0,i.jsx)(n.p,{children:"In the next iterations, the implementations are planned as following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Dual-Consensus Multi-Steward Support: One consensus mechanism selects an Steward from all users,\nwhile a second governs group decisions among the elected Stewards"}),"\n",(0,i.jsx)(n.li,{children:"Consensus mechanism for handling concurrent changes within the same epoch"}),"\n",(0,i.jsx)(n.li,{children:"Key rotation support"}),"\n",(0,i.jsx)(n.li,{children:"Benchmarking for the multi-Steward configuration including the network time"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["[1] RFC 9420: The Messaging Layer Security (MLS) Protocol. Retrieved from ",(0,i.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/rfc9420/",children:"https://datatracker.ietf.org/doc/rfc9420/"})]}),"\n",(0,i.jsxs)(n.li,{children:["[2] OpenMLS. Retrived from ",(0,i.jsx)(n.a,{href:"https://github.com/openmls/openmls",children:"https://github.com/openmls/openmls"})]}),"\n",(0,i.jsxs)(n.li,{children:["[3] Waku. Retrived from ",(0,i.jsx)(n.a,{href:"https://waku.org/",children:"https://waku.org/"})]}),"\n",(0,i.jsxs)(n.li,{children:["[4] de-MLS. Retrived from ",(0,i.jsx)(n.a,{href:"https://github.com/vacp2p/de-mls/",children:"https://github.com/vacp2p/de-mls/"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(96540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}},58834:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/flow-e56eebf7e59df3cb5a6acc738dbeb72e.png"},84468:e=>{e.exports=JSON.parse('{"permalink":"/rlog/de-mls-with-waku","source":"@site/rlog/2024-12-23-de-mls.mdx","title":"Decentralized Message Layer Security (De-MLS) with Waku","description":"This post introduces de-MLS, a decentralized variant of Message Layer Security (MLS)","date":"2025-09-02T14:00:00.000Z","tags":[],"readingTime":13.45,"hasTruncateMarker":true,"authors":[{"name":"Ekaterina","github":"seemenkina","key":"seemenkina","page":null}],"frontMatter":{"title":"Decentralized Message Layer Security (De-MLS) with Waku","date":"2025-09-02T14:00:00.000Z","authors":"seemenkina","published":true,"slug":"de-mls-with-waku","categories":"research","toc_min_heading_level":2,"toc_max_heading_level":4},"unlisted":false,"nextItem":{"title":"Scaling libp2p GossipSub for Large Messages: An Evaluation of Performance Improvement Proposals","permalink":"/rlog/gsub-perf-imp-comparison"}}')}}]);